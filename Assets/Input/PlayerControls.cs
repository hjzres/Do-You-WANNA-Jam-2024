//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Patient"",
            ""id"": ""a0bdd0d9-a894-4713-9529-ac807878b8ef"",
            ""actions"": [
                {
                    ""name"": ""MoveCharacter"",
                    ""type"": ""Value"",
                    ""id"": ""ed498db1-e196-4c53-93b2-7c5a4c8bcc98"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchRole"",
                    ""type"": ""Button"",
                    ""id"": ""61169caa-47f6-4f6b-b298-8dd6ee53534c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""eaf86c0a-dbc1-4851-ac57-7721f420e4a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseGame"",
                    ""type"": ""Button"",
                    ""id"": ""ed1b9450-451f-4e8a-996e-3e7b1761637e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ed42f9ee-0bc1-4846-8b76-65f7b34d4623"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCharacter"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6f83c181-7000-4b25-8806-fac261a9533a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCharacter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""514f6166-8c69-469a-a433-16bb8dfaecfd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCharacter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""851188a0-dabf-40e3-bdc0-52e4f4d183d2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCharacter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3ad85469-a80c-4c78-99ec-a4651d8fd15e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCharacter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""918b4671-b52b-4142-aacd-a491f78f6bb7"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5d89a43-89f9-4e0b-a36c-4ae65a88d733"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fae4c4bf-fa11-4a4d-a39a-21af3e26668c"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchRole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Watcher"",
            ""id"": ""81cf912d-8221-4b7d-829b-e4a4d629c29e"",
            ""actions"": [
                {
                    ""name"": ""MoveCamera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""84033743-64c6-4f26-aa5e-c5e9b2827780"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchRole"",
                    ""type"": ""Button"",
                    ""id"": ""5eb6a766-8719-4584-aa43-3c53d73313d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeCamera"",
                    ""type"": ""Button"",
                    ""id"": ""8b7c1a64-a9c1-4aed-b833-3213f8e0a11e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseGame"",
                    ""type"": ""Button"",
                    ""id"": ""4d67509e-26b1-4e8b-a8c0-0c5490b05776"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""84ec7115-587a-448f-9273-95f8a6d2feb4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f0e9b8fa-bcc6-4322-ad2f-f0fcf389e514"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5048ea8a-8a85-43d5-a40c-e4312f0ea667"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a233e147-5aa9-4d97-b54b-13bcc078f6c8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e07febfc-16c4-4d79-bbca-567ea521370f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9a0077f1-8539-4538-9bbb-cf8e87ff9ecd"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76384edd-47f9-4c0c-a9a4-50bfd697c179"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""467a94da-de2f-417b-96c4-d9aab2123509"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchRole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Patient
        m_Patient = asset.FindActionMap("Patient", throwIfNotFound: true);
        m_Patient_MoveCharacter = m_Patient.FindAction("MoveCharacter", throwIfNotFound: true);
        m_Patient_SwitchRole = m_Patient.FindAction("SwitchRole", throwIfNotFound: true);
        m_Patient_Interact = m_Patient.FindAction("Interact", throwIfNotFound: true);
        m_Patient_PauseGame = m_Patient.FindAction("PauseGame", throwIfNotFound: true);
        // Watcher
        m_Watcher = asset.FindActionMap("Watcher", throwIfNotFound: true);
        m_Watcher_MoveCamera = m_Watcher.FindAction("MoveCamera", throwIfNotFound: true);
        m_Watcher_SwitchRole = m_Watcher.FindAction("SwitchRole", throwIfNotFound: true);
        m_Watcher_ChangeCamera = m_Watcher.FindAction("ChangeCamera", throwIfNotFound: true);
        m_Watcher_PauseGame = m_Watcher.FindAction("PauseGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Patient
    private readonly InputActionMap m_Patient;
    private List<IPatientActions> m_PatientActionsCallbackInterfaces = new List<IPatientActions>();
    private readonly InputAction m_Patient_MoveCharacter;
    private readonly InputAction m_Patient_SwitchRole;
    private readonly InputAction m_Patient_Interact;
    private readonly InputAction m_Patient_PauseGame;
    public struct PatientActions
    {
        private @PlayerControls m_Wrapper;
        public PatientActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveCharacter => m_Wrapper.m_Patient_MoveCharacter;
        public InputAction @SwitchRole => m_Wrapper.m_Patient_SwitchRole;
        public InputAction @Interact => m_Wrapper.m_Patient_Interact;
        public InputAction @PauseGame => m_Wrapper.m_Patient_PauseGame;
        public InputActionMap Get() { return m_Wrapper.m_Patient; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PatientActions set) { return set.Get(); }
        public void AddCallbacks(IPatientActions instance)
        {
            if (instance == null || m_Wrapper.m_PatientActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PatientActionsCallbackInterfaces.Add(instance);
            @MoveCharacter.started += instance.OnMoveCharacter;
            @MoveCharacter.performed += instance.OnMoveCharacter;
            @MoveCharacter.canceled += instance.OnMoveCharacter;
            @SwitchRole.started += instance.OnSwitchRole;
            @SwitchRole.performed += instance.OnSwitchRole;
            @SwitchRole.canceled += instance.OnSwitchRole;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @PauseGame.started += instance.OnPauseGame;
            @PauseGame.performed += instance.OnPauseGame;
            @PauseGame.canceled += instance.OnPauseGame;
        }

        private void UnregisterCallbacks(IPatientActions instance)
        {
            @MoveCharacter.started -= instance.OnMoveCharacter;
            @MoveCharacter.performed -= instance.OnMoveCharacter;
            @MoveCharacter.canceled -= instance.OnMoveCharacter;
            @SwitchRole.started -= instance.OnSwitchRole;
            @SwitchRole.performed -= instance.OnSwitchRole;
            @SwitchRole.canceled -= instance.OnSwitchRole;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @PauseGame.started -= instance.OnPauseGame;
            @PauseGame.performed -= instance.OnPauseGame;
            @PauseGame.canceled -= instance.OnPauseGame;
        }

        public void RemoveCallbacks(IPatientActions instance)
        {
            if (m_Wrapper.m_PatientActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPatientActions instance)
        {
            foreach (var item in m_Wrapper.m_PatientActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PatientActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PatientActions @Patient => new PatientActions(this);

    // Watcher
    private readonly InputActionMap m_Watcher;
    private List<IWatcherActions> m_WatcherActionsCallbackInterfaces = new List<IWatcherActions>();
    private readonly InputAction m_Watcher_MoveCamera;
    private readonly InputAction m_Watcher_SwitchRole;
    private readonly InputAction m_Watcher_ChangeCamera;
    private readonly InputAction m_Watcher_PauseGame;
    public struct WatcherActions
    {
        private @PlayerControls m_Wrapper;
        public WatcherActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveCamera => m_Wrapper.m_Watcher_MoveCamera;
        public InputAction @SwitchRole => m_Wrapper.m_Watcher_SwitchRole;
        public InputAction @ChangeCamera => m_Wrapper.m_Watcher_ChangeCamera;
        public InputAction @PauseGame => m_Wrapper.m_Watcher_PauseGame;
        public InputActionMap Get() { return m_Wrapper.m_Watcher; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WatcherActions set) { return set.Get(); }
        public void AddCallbacks(IWatcherActions instance)
        {
            if (instance == null || m_Wrapper.m_WatcherActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WatcherActionsCallbackInterfaces.Add(instance);
            @MoveCamera.started += instance.OnMoveCamera;
            @MoveCamera.performed += instance.OnMoveCamera;
            @MoveCamera.canceled += instance.OnMoveCamera;
            @SwitchRole.started += instance.OnSwitchRole;
            @SwitchRole.performed += instance.OnSwitchRole;
            @SwitchRole.canceled += instance.OnSwitchRole;
            @ChangeCamera.started += instance.OnChangeCamera;
            @ChangeCamera.performed += instance.OnChangeCamera;
            @ChangeCamera.canceled += instance.OnChangeCamera;
            @PauseGame.started += instance.OnPauseGame;
            @PauseGame.performed += instance.OnPauseGame;
            @PauseGame.canceled += instance.OnPauseGame;
        }

        private void UnregisterCallbacks(IWatcherActions instance)
        {
            @MoveCamera.started -= instance.OnMoveCamera;
            @MoveCamera.performed -= instance.OnMoveCamera;
            @MoveCamera.canceled -= instance.OnMoveCamera;
            @SwitchRole.started -= instance.OnSwitchRole;
            @SwitchRole.performed -= instance.OnSwitchRole;
            @SwitchRole.canceled -= instance.OnSwitchRole;
            @ChangeCamera.started -= instance.OnChangeCamera;
            @ChangeCamera.performed -= instance.OnChangeCamera;
            @ChangeCamera.canceled -= instance.OnChangeCamera;
            @PauseGame.started -= instance.OnPauseGame;
            @PauseGame.performed -= instance.OnPauseGame;
            @PauseGame.canceled -= instance.OnPauseGame;
        }

        public void RemoveCallbacks(IWatcherActions instance)
        {
            if (m_Wrapper.m_WatcherActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWatcherActions instance)
        {
            foreach (var item in m_Wrapper.m_WatcherActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WatcherActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WatcherActions @Watcher => new WatcherActions(this);
    public interface IPatientActions
    {
        void OnMoveCharacter(InputAction.CallbackContext context);
        void OnSwitchRole(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnPauseGame(InputAction.CallbackContext context);
    }
    public interface IWatcherActions
    {
        void OnMoveCamera(InputAction.CallbackContext context);
        void OnSwitchRole(InputAction.CallbackContext context);
        void OnChangeCamera(InputAction.CallbackContext context);
        void OnPauseGame(InputAction.CallbackContext context);
    }
}
